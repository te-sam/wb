import os
import asyncio

from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command, StateFilter
from aiogram.types import InputMediaPhoto

from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from keyboards.keyboard import main_kb, hastags_kb, another_post_kb, cancel_kb
from parsing import get_post, fast_get_post



load_dotenv()
if os.getenv("MODE") == "TEST":
    bot = Bot(token=os.getenv("TEST_API_TOKEN"))
    print(os.getenv("MODE"))
else:
    bot = Bot(token=os.getenv("API_TOKEN"))
    print(os.getenv("MODE"))
storage = MemoryStorage()
dp = Dispatcher(storage=MemoryStorage())


class Form(StatesGroup):
    give_link = State()
    give_title = State()
    give_hashtag = State()
    give_links = State()


async def print_post(link: str, message: types.Message):
    post = fast_get_post(link)

    if post is None:
        await message.answer("–ù—É–∂–Ω–æ —á—É—Ç—å-—á—É—Ç—å –ø–æ–¥–æ–∂–¥–∞—Ç—å(")
        post = get_post(link)

    if 'product_title' in post.keys():
        await message.answer(f'–¢–æ–≤–∞—Ä–∞ "{post["product_title"]}" –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏')
        return None

    print(post)
    description = "*{title}*\n\n*–¶–µ–Ω–∞:* {price} ‚ÇΩ\n*–ê—Ä—Ç–∏–∫—É–ª:* {link}\n\n#Wildberries".format(title=post['product_title'], price=post['price'], link=post['link'])
    await bot.send_photo(chat_id=message.from_user.id, photo=post['image'], caption=description, parse_mode='Markdown', reply_markup=main_kb(message.from_user.id)) 


@dp.message(StateFilter("*"), F.text == "–û—Ç–º–µ–Ω–∞")  # "*" –ª–æ–≤–∏—Ç –ª—é–±–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
async def quit_in_state(message: types.Message, state: FSMContext):
    print("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ quit –≤—ã–∑–≤–∞–Ω (–≤ –ª—é–±–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏)")
    await state.clear()
    print("–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏:", await state.get_state())  # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å None
    await message.answer('–í—ã–±–∏—Ä–∞–π, —Å—É–¥–∞—Ä—ã–Ω—è', reply_markup=main_kb(message.from_user.id))


@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    await message.answer(text="–ü—Ä–∏–≤–µ—Ç, –û–ª–∏–≤–∫–∞, –æ—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É —Å WB –∏ —è —Å–¥–µ–ª–∞—é —Ç–µ–±–µ –ø–æ—Å—Ç. –¢—ë–º–∞ —Å—ã—Ä, –∫—Å—Ç–∞—Ç–∏", reply_markup=main_kb(message.from_user.id))


@dp.message(F.text == "–û–¥–∏–Ω–æ–∫–∏–π –ø–æ—Å—Ç")
async def get_post_alone(message: types.Message, state: FSMContext):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É, –∫—Ä–∞—Å–æ—Ç–∫–∞:", reply_markup=cancel_kb(message.from_user.id))
    await state.set_state(Form.give_link)


@dp.message(Form.give_link)
async def make_post(message: types.Message, state: FSMContext):
    await state.update_data(link=message.text)
    data = await state.get_data()
    print(data['link'])
    await print_post(data['link'], message)
    await state.clear()


@dp.message(F.text == "–ì—Ä—É–ø–ø–æ–≤–æ–π –ø–æ—Å—Ç (—Ü–µ–ª–∏–∫–æ–º)")
@dp.message(F.text == "–ì—Ä—É–ø–ø–æ–≤–æ–π –ø–æ—Å—Ç (—Ç–æ–ª—å–∫–æ –∞—Ä—Ç–∏–∫—É–ª—ã)")
async def get_title(message: types.Message, state: FSMContext):
    await state.update_data(type_group=message.text)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å –∑–∞–≥–æ–ª–æ–≤–æ–∫, –¥–µ—Ç–∫–∞", reply_markup=cancel_kb(message.from_user.id))
    await state.set_state(Form.give_title)


@dp.message(Form.give_title)
async def get_hashtag(message: types.Message, state: FSMContext):
    await state.update_data(title=message.text)
    await state.set_state(Form.give_hashtag)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å —Ö—ç—à—Ç—ç–≥, –µ—Å–ª–∏ –±–µ–∑ —Ö—ç—à—Ç—ç–≥–∞, –æ—Ç–ø—Ä–∞–≤—å –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", reply_markup=hastags_kb(message.from_user.id))


@dp.message(Form.give_hashtag)
async def get_group_from_posts(message: types.Message, state: FSMContext):
    await state.update_data(hashtag=message.text)
    await state.set_state(Form.give_links)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫–∏, –∫—Ä–æ—à–∫–∞", reply_markup=cancel_kb(message.from_user.id))


@dp.message(Form.give_links)
async def make_some_posts(message: types.Message, state: FSMContext):
    await state.update_data(links=message.text)
    data = await state.get_data()
    links = data['links'].split()

    if len(links) > 10:
        await message.answer("–ë—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 —Å—Å—ã–ª–æ–∫", reply_markup=cancel_kb(message.from_user.id))
        links = links[:10]

    posts_text = f"*{data['title']}*\n\n"
    image_links = []
    images = []

    if data['hashtag'] == "–ë–µ–∑ —Ö—ç—à—Ç–µ–≥–∞":
        hashtag = ""
    else:
        hashtag = data['hashtag'].replace("_", "\_")

    print(data['title'])
    print(links)

    i = 1  # –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω—É–º–µ—Ä–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
    for n, link in enumerate(links):
       
        post = fast_get_post(link)

        if post is None:
            post = get_post(link)

        if 'price' not in post.keys():
            await message.answer(f'–¢–æ–≤–∞—Ä–∞ "{post["product_title"]}" –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏')
            i -= 1
            continue

        if data['type_group'] == "–ì—Ä—É–ø–ø–æ–≤–æ–π –ø–æ—Å—Ç (—Ü–µ–ª–∏–∫–æ–º)":
            posts_text += f"*{n+i}) –¶–µ–Ω–∞:* {post['price']} ‚ÇΩ\n*–ê—Ä—Ç–∏–∫—É–ª*: {post['link']}\n"
        else:
            posts_text += f"*{n+i}) –ê—Ä—Ç–∏–∫—É–ª*: {post['link']}\n"
        image_links.append(post['image'])

    for image in image_links:
        print(image)
        images.append(InputMediaPhoto(media=image))
    
    if images:
        images[0].caption = posts_text + "\n#Wildberries\n" + hashtag
        images[0].parse_mode = 'Markdown'

    await message.answer_media_group(media=images)
    await message.answer("–ï—â—ë –ø–æ—Å—Ç–∏–∫?",reply_markup=main_kb(message.from_user.id))
    await state.clear()


@dp.message(F.text == '–°–¥–µ–ª–∞—Ç—å –µ—â—ë –ø–æ—Å—Çüòä')
async def redirect_main(message: types.Message, state: FSMContext):
    await message.answer("–í—ã–±–∏—Ä–∞–π—Ç–µ, —Å—É–¥–∞—Ä—ã–Ω—è", reply_markup=main_kb(message.from_user.id))



@dp.message()
async def echo(message: types.Message):
    await print_post(message.text, message)

    
async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())